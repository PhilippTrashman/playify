# Name of the GitHub Actions workflow
name: Update Release Links on Publish

# -----------------
# --- TRIGGER ---
# -----------------
# This workflow runs automatically ONLY when a new release is "published".
# It will not run on draft or pre-releases.
on:
  release:
    types: [published]

# -----------------
# --- JOB ---
# -----------------
jobs:
  update-links:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get the release version tag
        id: get_version
        run: echo "VERSION_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV

      - name: Update README.md and website file
        run: |
          VERSION_TAG="${{ env.VERSION_TAG }}"
          VERSION_NUMBER="${VERSION_TAG#v}"
          
          echo "New release detected. Tag: ${VERSION_TAG}, Number: ${VERSION_NUMBER}"

          sed -i "s|/releases/download/.*/Playify_Setup_v.*\.exe|/releases/download/${VERSION_TAG}/Playify_Setup_v${VERSION_NUMBER}.exe|g" README.md
          echo "README.md has been updated."
          
          sed -i "s|/releases/download/.*/Playify_Setup_v.*\.exe|/releases/download/${VERSION_TAG}/Playify_Setup_v${VERSION_NUMBER}.exe|g" docs/self-host.html
          echo "docs/self-host.html has been updated."

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add README.md docs/self-host.html
          
          if ! git diff --staged --quiet; then
            git commit -m "chore: Update download links to version ${{ env.VERSION_TAG }}"
            git push
            echo "Changes have been committed and pushed."
          else
            echo "No changes to commit. Files are already up-to-date."
